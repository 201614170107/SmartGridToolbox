Design Notes for MGSim
----------------------

1. There are powerflow and non-powerflow aspects to this problem.

   a) powerflow

   b) heat flow

   c) control aspects

   d) climate and weather aspects

   e) building models

   f) market aspects

   g) reliability aspects

   h) optimization aspects

2. Powerflow has steady state solution and non-steady state solution. Don't
   really want to commit to either.

   a) Steady state derives from Kirchoff's circuit laws, assuming constant
      impedance for all components. Note however that the constant impedance
      is not necessarily known and might be expressed in terms of power,
      voltage etc.

   b) Non-steady state arises directly from the physics of the components
      (generators, transformers etc.).

3. Primary design consideration is need for extensibility and flexibility.
   How do we achieve this?

4. Network design.

   *  Is there an upstream/downstream in a microgrid? Power could flow 
      either direction. So on the surface, answer is "no".

   *  Thus, network will consist of nodes, each of which represents a voltage
      wrt earth, and edges, each of which represents an impedance.

   *  Impedances could be +ve (for standard impedances) or -ve (for power
      sources).

   *  Use V, I as the state variables for the system (complex V and I,
      whose real parts are the instantaneous values).

   *  Z = Z(I, V) which is considered as specifying the complete electrical
      behaviour of the object.
   
   *  S = VI* (Note: not using RMS here).

   *  Impedances could depend on other parameters of the system. For example,
      S = V^2/Z, so a constant power load would have Z proportional to V^2.
      A voltage source would use V = IZ, so Z would be inversely proportional
      to I.

   *  Instantaneous current will flow as dictated by Kirchoff's laws. For
      the instantaneous problem, time dependence is dictated by physics of the
      components.

   *  For AC, use reference voltage phase at a certain point in space and time.
      Assume a frequency e.g. 50 Hz. V(t) = V(0) exp(jwt) for reference
      angular freq. w. Then, use "interaction picture": V'(t) = V(t) exp(-jwt).
      This means phase of V' will evolve slowly.

   *  Ground is an explicit node.

   *  Essential design problem is how to map objects to the network. For
      instance, a transformer may connect several edges at a node in a 
      complex manner, so the transformer contributes to the node and all the
      edges.

      -  Each object contains several nodes and edges, each of which are
         wholly owned by that object. Wrt powerflow, all the object-centric
         behaviour resides in the edges.
      
      -  The nodes and edges are not specialized, instead, their behaviour is
         delegated to their owner object.

      -  Objects are connected by "nodes" - an external "socket"
         corresponding to a single wire. A node is the same thing as a bus. 

      -  Busses themselves are grouped according to "scope". For example,
         a transformer may have a high voltage or a low voltage scope, or
         a load to earth may have a "live" and an "earth" scope.

      -  Thus when two objects are connected, we can specify scopes and busses.
         For example: Connect(Obj1, "Output",  Obj2, "Input");
         Busses are automatically matched by name? Would be possible to
         explicitly specify how wires hook up to each other, but matching
         by name is probably more foolproof.

      -  We can connect multiple objects to the same scope on a given object.
         Missing busses on one of the objects are just ignored.

   *  Multiple inheritance issue.

      -  We have powerflow objects, heatflow objects etc. How do we deal with
         this given the pitfalls of multiple inheritance?

      -  Answer: A particular object will inherit from base Object only. It
         will then use composition to incorporate e.g. powerflow, heatflow
         features. It will also implement powerflow and heatflow interfaces
         by passing them through to these objects.

5) Class structure.

   *  Object: manage the identity of the object.

   *  Node: something that has a voltage, wrt. ground, and can have any number
      of edges connected to it. Nodes are owned by their parent objects.

   *  Edge: something that connects between exactly two nodes.

   *  Model: Owner of all objects in it. Each object
